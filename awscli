s3 ##########################
aws s3 ls
aws s3 cp file s3://bucket1
aws s3 cp --recursive templates/ "s3://${bucket}/templates" --acl public-read
aws s3api put-bucket-versioning --bucket "${bucket}" --versioning-configuration Status=Enabled
aws cloudformation deploy --stack-name $stackname --template-file ecs-blue-green-deployment.yaml --capabilities CAPABILITY_NAMED_IAM --parameter-overrides GitHubUser=$GitHubUser GitHubToken=$GitHubToken TemplateBucket=$bucket

ec2 #########################
aws ec2 run-instances \
  --image-id ami-id \
  --key-name key-name \
  --user-data file://instance-setup.sh \
  --count 1 \
  --instance-type instance-type \
  --iam-instance-profile Name=iam-instance-profile

# instance-steup.sh
#!/bin/bash
yum -y update
yum install -y ruby
cd /home/ec2-user
curl -O https://bucket-name.s3.amazonaws.com/latest/install
chmod +x ./install
./install auto

aws ec2 run-instances --image-id ami-id --key-name key-name --user-data file://instance-setup.txt --count 1 --instance-type instance-type --iam-instance-profile Name=iam-instance-profile --security-groups CodeDeploy-Windows-Security-Group
aws ec2 describe-instances --filters "Name=key-name,Values=keyName" --query "Reservations[*].Instances[*].[InstanceId]" --output text
aws ec2 create-tags --resources instance-id --tags Key=Name,Value=CodeDeployDemo
aws ec2 create-tags --resources instance-id --tags Key=Name,Value=testInstance Key=Region,Value=West Key=Environment,Value=Beta
aws ec2 describe-instance-status --instance-ids instance-id --query "InstanceStatuses[*].InstanceStatus.[Status]" --output text 

# autoscalling group
aws autoscaling create-launch-configuration \
  --launch-configuration-name CodeDeployDemo-AS-Configuration \
  --image-id image-id \
  --key-name key-name \
  --iam-instance-profile CodeDeployDemo-EC2-Instance-Profile \
  --instance-type t1.micro \ 
  --user-data file://path/to/instance-setup.sh
  
aws autoscaling create-auto-scaling-group \
  --auto-scaling-group-name CodeDeployDemo-AS-Group \
  --launch-configuration-name CodeDeployDemo-AS-Configuration \
  --min-size 1 \
  --max-size 1 \
  --desired-capacity 1 \
  --availability-zones availability-zone  
  
  aws ec2 describe-availability-zones --region us-west-2
  aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names CodeDeployDemo-AS-Group --query "AutoScalingGroups[0].Instances[*].[HealthStatus, LifecycleState]" --output text
  
# codedeploy
aws deploy create-deployment-config --deployment-config-name ThreeQuartersHealthy --minimum-healthy-hosts type=FLEET_PERCENT,value=75
aws deploy create-application --application-name SimpleDemoApp
aws deploy create-deployment-group \
  --application-name SimpleDemoApp \
  --auto-scaling-groups CodeDeployDemo-AS-Group \
  --deployment-group-name SimpleDemoDG \
  --deployment-config-name CodeDeployDefault.OneAtATime \
  --service-role-arn service-role-arn  
aws deploy create-deployment \
  --application-name SimpleDemoApp \
  --deployment-config-name CodeDeployDefault.OneAtATime \
  --deployment-group-name SimpleDemoDG \
  --s3-location bucket=bucket-name,bundleType=zip,key=samples/latest/SampleApp_Linux.zip
  
aws deploy list-deployments --application-name SimpleDemoApp --deployment-group-name SimpleDemoDG --query "deployments" --output text
aws deploy get-deployment --deployment-id deployment-id --query "deploymentInfo.status" --output text

aws deploy list-deployments --application-name bluegreenec2 --deployment-group-name group1
{
    "deployments": [
        "d-5EUZ5V5F2"
    ]
}

aws deploy list-deployments --application-name bluegreenec2 --deployment-group-name group1 --query 'deployments' --output text
d-5EUZ5V5F2

aws deploy get-deployment --deployment-id d-5EUZ5V5F2 --query 'deploymentInfo.status' --output text
Failed
[ec2-user@ip-172-31-52-87 ~]$ aws deploy get-deployment --deployment-id d-5EUZ5V5F2
{
    "deploymentInfo": {
        "applicationName": "bluegreenec2",
        "status": "Failed",
        "deploymentOverview": {
            "Skipped": 0,
            "Succeeded": 0,
            "Failed": 1,
            "Ready": 0,
            "InProgress": 0,
            "Pending": 0
        },
        "computePlatform": "Server",
        "deploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "creator": "user",
        "errorInformation": {
            "message": "The overall deployment failed because too many individual instances failed deployment, too few healthy instances are available for deployment, or some instances in your deployment group are experiencing problems.",
            "code": "HEALTH_CONSTRAINTS"
        },
        "fileExistsBehavior": "DISALLOW",
        "loadBalancerInfo": {
            "targetGroupInfoList": [
                {
                    "name": "bluegreentarget1"
                }
            ]
        },
        "deploymentId": "d-5EUZ5V5F2",
        "deploymentStatusMessages": [],
        "ignoreApplicationStopFailures": false,
        "deploymentStyle": {
            "deploymentType": "IN_PLACE",
            "deploymentOption": "WITH_TRAFFIC_CONTROL"
        },
        "updateOutdatedInstancesOnly": false,
        "rollbackInfo": {},
        "instanceTerminationWaitTimeStarted": false,
        "deploymentGroupName": "group1",
        "createTime": 1580848980.898,
        "completeTime": 1580849286.499,
        "revision": {
            "revisionType": "S3",
            "s3Location": {
                "bundleType": "zip",
                "bucket": "aws-codedeploy-us-east-1",
                "key": "samples/latest/SampleApp_Linux.zip"
            }
        }
    }
}


aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names CodeDeployDemo-AS-Group --query "AutoScalingGroups[0].Instances[*].InstanceId" --output text
# retun public dns name of ec2
aws ec2 describe-instances --instance-id instance-id --query "Reservations[0].Instances[0].PublicDnsName" --output text
  

  
