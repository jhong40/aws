kubectl run nginx --image=nginx 
kubectl run nginx --image=nginx --dry-run -o yaml > nginxdeploymen.yaml
kubectl expose deployment nginx --port=80 --target-port=80

curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/linux/amd64/kubectl
chmod +x ./kubectl
mv ./kubectl /usr/local/bin/kubectl


ubunto

    apt-get update
    apt install -y docker.io
    systemctl start docker
    docker --version
    docker pull ubuntu
    docker images
   hostnamectl set-hostname master
    apt-get update
    apt-get install -y apt-transport-https
   curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
   cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
    
   apt-get install -y kubelet kubeadm kubectl
   swapoff -a
   kubeadm init --pod-network-cidr=172.31.0.0/16 --ignore-preflight-errors=all   
   
   switch to regular user
      
   kubectl apply -f https://docs.projectcalico.org/v3.0/getting-started/kubernetes/installation/hosted/kubeadm/1.7/calico.yaml
   
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

   kubeadm join 172.31.38.69:6443 --token nqpx03.f8dgwud1m1djlx3t \
    --discovery-token-ca-cert-hash sha256:306b41f286a1c2e30c7ed1dae502da8c6262b9648537ba59bca37656738b580d
    

#HPA - Horizontal Pod AutoScaller
kubectl run php-apache --image=k8s.gcr.io/hpa-example --requests=cpu=200m --expose --port=80
kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10
kubectl get hpa
#trigger load
kubectl run -i --tty load-generator --image=busybox /bin/sh
while true; do wget -q -O - http://php-apache; done
#see action
kubectl get hpa -w

#CA - Cluster AutoScaller (CA)
wget https://eksworkshop.com/beginner/080_scaling/deploy_ca.files/cluster_autoscaler.yml
#cluster_autoscaler.yml
#get to ASG in AWS to find ASG name: my-asg-group1, min/max: 2/8
command:
  - ./cluster-autoscaler
  - --v=4
  - --stderrthreshold=info
  - --cloud-provider=aws
  - --skip-nodes-with-local-storage=false
  - --nodes=2:8:my-asg-group1
env:
  - name: AWS_REGION
    value: us-east-1
#create IAM policy
mkdir ~/environment/asg_policy
cat <<EoF > ~/environment/asg_policy/k8s-asg-policy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeAutoScalingInstances",
        "autoscaling:SetDesiredCapacity",
        "autoscaling:TerminateInstanceInAutoScalingGroup",
        "autoscaling:DescribeTags"
      ],
      "Resource": "*"
    }
  ]
}
EoF
aws iam put-role-policy --role-name $ROLE_NAME --policy-name ASG-Policy-For-Worker --policy-document file://~/environment/asg_policy/k8s-asg-policy.json
#validate the plicy is attached to the role
aws iam get-role-policy --role-name $ROLE_NAME --policy-name ASG-Policy-For-Worker
#deploy autoscaler
kubectl apply -f ~/environment/cluster-autoscaler/cluster_autoscaler.yml
kubectl logs -f deployment/cluster-autoscaler -n kube-system




 








   

